package com.example.frontcapstone2025.api


import androidx.activity.result.ActivityResult
import androidx.activity.result.ActivityResultLauncher
import androidx.activity.result.contract.ActivityResultContracts
import androidx.appcompat.app.AppCompatActivity
import android.annotation.SuppressLint
import android.content.ActivityNotFoundException
import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.widget.Button
import android.widget.Toast
import com.usbwifimonitor.api.R
import java.text.DateFormat
import java.text.SimpleDateFormat
import java.util.Date
import java.util.Locale
import java.util.Observable
import java.util.Observer

class MainActivity : AppCompatActivity(), Observer {

    companion object {
        const val USBWIFIMON_PACKAGE = "com.usbwifimon.app"
        const val CAPTURE_CTRL_ACTIVITY = "com.usbwifimon.app.CaptureCtrl"
        const val CAPTURE_STATUS_ACTION = "com.usbwifimon.app.CaptureStatus"
        const val TAG = "MainActivity"
    }

    private lateinit var mStart: Button
    private lateinit var mStatus: Button
    private var mCaptureRunning = false

    private val captureStartLauncher: ActivityResultLauncher<Intent> =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            handleCaptureStartResult(result)
        }

    private val captureStopLauncher: ActivityResultLauncher<Intent> =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            handleCaptureStopResult(result)
        }

    private val captureStatusLauncher: ActivityResultLauncher<Intent> =
        registerForActivityResult(ActivityResultContracts.StartActivityForResult()) { result ->
            handleCaptureStatusResult(result)
        }

    @SuppressLint("MissingInflatedId")
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContentView(R.layout.activity_main)

        mStart = findViewById(R.id.start_btn)
        mStart.setOnClickListener { v ->
            if (!mCaptureRunning)
                startCapture()
            else
                stopCapture()
        }

        mStatus = findViewById(R.id.status_btn)
        mStatus.setOnClickListener { v -> queryCaptureStatus() }

        if ((savedInstanceState != null) && savedInstanceState.containsKey("capture_running"))
            setCaptureRunning(savedInstanceState.getBoolean("capture_running"))
        else
            queryCaptureStatus()

        // will call the "update" method when the capture status changes
        MyBroadcastReceiver.CaptureObservable.getInstance().addObserver(this)
    }

    override fun onDestroy() {
        super.onDestroy()
        MyBroadcastReceiver.CaptureObservable.getInstance().deleteObserver(this)
    }

    override fun update(o: Observable?, arg: Any?) {
        val capture_running = arg as Boolean
        Log.d(TAG, "capture_running: $capture_running")
        setCaptureRunning(capture_running)
    }

    override fun onSaveInstanceState(bundle: Bundle) {
        bundle.putBoolean("capture_running", mCaptureRunning)
        super.onSaveInstanceState(bundle)
    }

    private fun queryCaptureStatus() {
        Log.d(TAG, "Querying USBWiFiMonitor")

        val intent = Intent(Intent.ACTION_VIEW)
        intent.setClassName(USBWIFIMON_PACKAGE, CAPTURE_CTRL_ACTIVITY)
        intent.putExtra("action", "get_status")

        try {
            captureStatusLauncher.launch(intent)
        } catch (e: ActivityNotFoundException) {
            Toast.makeText(this, "The USB WiFi Monitor package not found: $USBWIFIMON_PACKAGE", Toast.LENGTH_LONG).show()
        }
    }

    private fun startCapture() {
        Log.d(TAG, "Starting USBWiFiMonitor")

        val intent = Intent(Intent.ACTION_VIEW)
        intent.setClassName(USBWIFIMON_PACKAGE, CAPTURE_CTRL_ACTIVITY)

        intent.putExtra("action", "start")

        // Channel 1-11 or -1 (default) for channel hopping
        intent.putExtra("channel", -1)

        // 0: NO_HT
        // 1: HT20 (default)
        // 2: HT40-
        // 3: HT40+
        intent.putExtra("channel_width", 1)

        // Enable the dump to PCAP file
        // final DateFormat fmt = new SimpleDateFormat("dd_MMM_HH_mm_ss", Locale.US)
        // String pcapName = "Capture_" + fmt.format(new Date()) + ".pcap"
        val pcapName = "Capture.pcap"
        intent.putExtra("pcap_name", pcapName)

        // Specify the BroadcastReceiver to get notified if the capture is stopped
        intent.putExtra("broadcast_receiver", "com.usbwifimon.api.MyBroadcastReceiver")

        captureStartLauncher.launch(intent)
    }

    private fun stopCapture() {
        Log.d(TAG, "Stopping USBWiFiMonitor")

        val intent = Intent(Intent.ACTION_VIEW)
        intent.setClassName(USBWIFIMON_PACKAGE, CAPTURE_CTRL_ACTIVITY)
        intent.putExtra("action", "stop")

        captureStopLauncher.launch(intent)
    }

    private fun setCaptureRunning(running: Boolean) {
        mCaptureRunning = running
        mStart.text = if (running) "Stop Capture" else "Start Capture"
    }

    private fun handleCaptureStartResult(result: ActivityResult) {
        Log.d(TAG, "USBWiFiMonitor start result: $result")

        if (result.resultCode == RESULT_OK) {
            Toast.makeText(this, "Capture started!", Toast.LENGTH_SHORT).show()
            setCaptureRunning(true)
        } else
            Toast.makeText(this, "Capture failed to start", Toast.LENGTH_SHORT).show()
    }

    private fun handleCaptureStopResult(result: ActivityResult) {
        Log.d(TAG, "USBWiFiMonitor stop result: $result")

        if (result.resultCode == RESULT_OK) {
            Toast.makeText(this, "Capture stopped!", Toast.LENGTH_SHORT).show()
            setCaptureRunning(false)
        } else
            Toast.makeText(this, "Could not stop capture", Toast.LENGTH_SHORT).show()
    }

    private fun handleCaptureStatusResult(result: ActivityResult) {
        Log.d(TAG, "USBWiFiMonitor status result: $result")

        if ((result.resultCode == RESULT_OK) && (result.data != null)) {
            val intent = result.data!!
            val running = intent.getBooleanExtra("running", false)
            val verCode = intent.getIntExtra("version_code", 0)
            val verName = intent.getStringExtra("version_name")

            Log.d(TAG, "USBWiFiMonitor version $verName ($verCode): running=$running")
            setCaptureRunning(running)
        }
    }
}

